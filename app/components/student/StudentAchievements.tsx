"use client";

import { useThemeStyles } from '@/app/hooks/useThemeStyles';
import { Achievement } from '@/app/types/achievements';

export function StudentAchievements() {
  const { getColorClass, getVariantClass } = useThemeStyles();

  const achievements: Achievement[] = [
    {
      id: 1,
      category: 'education',
      title: '–û—Ç–ª–∏—á–Ω–∏–∫',
      description: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ GPA –≤—ã—à–µ 4.5 –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–µ–º–µ—Å—Ç—Ä–∞',
      progress: 85,
      maxProgress: 100,
      isCompleted: false,
      reward: '–ó–æ–ª–æ—Ç–æ–π –∑–Ω–∞—á–æ–∫ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç',
      icon: 'üéì'
    },
    {
      id: 2,
      category: 'courses',
      title: '–ö—É—Ä—Å–æ–º–∞–Ω–∏—è',
      description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ 10 –∫—É—Ä—Å–æ–≤',
      progress: 7,
      maxProgress: 10,
      isCompleted: false,
      reward: '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–µ–π–¥–∂ –∏ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º –∫—É—Ä—Å–∞–º',
      icon: 'üìö'
    },
    {
      id: 3,
      category: 'events',
      title: '–ê–∫—Ç–∏–≤–∏—Å—Ç',
      description: '–ü–æ—Å–µ—Ç–∏—Ç–µ 5 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π',
      progress: 5,
      maxProgress: 5,
      isCompleted: true,
      reward: '–ë–µ–π–¥–∂ –∞–∫—Ç–∏–≤–∏—Å—Ç–∞ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
      icon: 'üéØ'
    },
    // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  ];

  const categories = [
    { id: 'all', label: '–í—Å–µ' },
    { id: 'education', label: '–û–±—É—á–µ–Ω–∏–µ' },
    { id: 'courses', label: '–ö—É—Ä—Å—ã' },
    { id: 'events', label: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è' },
    { id: 'career', label: '–ö–∞—Ä—å–µ—Ä–∞' }
  ];

  return (
    <div className="space-y-8">
      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className="flex space-x-4">
        {categories.map((category) => (
          <button
            key={category.id}
            className={`px-4 py-2 rounded-lg ${getVariantClass('button', 'outline')}`}
          >
            {category.label}
          </button>
        ))}
      </div>

      {/* –°–µ—Ç–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {achievements.map((achievement) => (
          <div
            key={achievement.id}
            className={`${getVariantClass('card', 'primary')} p-6 rounded-lg ${
              achievement.isCompleted ? 'border-2 border-green-500' : ''
            }`}
          >
            <div className="flex items-start justify-between">
              <div className="text-4xl mb-4">{achievement.icon}</div>
              {achievement.isCompleted && (
                <span className="px-2 py-1 text-sm bg-green-100 text-green-800 rounded">
                  –ü–æ–ª—É—á–µ–Ω–æ
                </span>
              )}
            </div>
            <h3 className={`text-lg font-medium mb-2 ${getColorClass('text.primary')}`}>
              {achievement.title}
            </h3>
            <p className={`text-sm mb-4 ${getColorClass('text.secondary')}`}>
              {achievement.description}
            </p>
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
                <span>
                  {achievement.progress}/{achievement.maxProgress}
                </span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div
                  className="bg-blue-600 h-2 rounded-full"
                  style={{
                    width: `${(achievement.progress / achievement.maxProgress) * 100}%`
                  }}
                />
              </div>
            </div>
            <div className="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
              <p className="text-sm">
                <span className="font-medium">–ù–∞–≥—Ä–∞–¥–∞:</span> {achievement.reward}
              </p>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
} 