"use client";
import { useState } from 'react';

interface Notification {
  id: string;
  type: 'job' | 'course' | 'mentor' | 'system';
  title: string;
  description: string;
  time: string;
  read: boolean;
  link?: string;
}

export default function NotificationsList() {
  const [notifications] = useState<Notification[]>([
    {
      id: '1',
      type: 'job',
      title: '–ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é',
      description: '–í–∞—à–µ —Ä–µ–∑—é–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–µ–π TechCorp',
      time: '5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥',
      read: false,
      link: '/dashboard/jobs'
    },
    {
      id: '2',
      type: 'course',
      title: '–ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω',
      description: '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å "React –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö"',
      time: '2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥',
      read: false,
      link: '/dashboard/courses'
    },
    {
      id: '3',
      type: 'mentor',
      title: '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω—Ç–æ—Ä–∞',
      description: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ',
      time: '1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥',
      read: true,
      link: '/dashboard/mentors'
    },
    // –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–¥–µ—Å—å
  ]);

  const getIcon = (type: Notification['type']) => {
    switch (type) {
      case 'job':
        return 'üíº';
      case 'course':
        return 'üìö';
      case 'mentor':
        return 'üë•';
      case 'system':
        return '‚öôÔ∏è';
    }
  };

  return (
    <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm">
      <div className="divide-y divide-gray-200 dark:divide-gray-700">
        {notifications.map((notification) => (
          <div
            key={notification.id}
            className={`p-6 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors ${
              !notification.read ? 'bg-blue-50 dark:bg-blue-900/20' : ''
            }`}
          >
            <div className="flex gap-4">
              <div className="text-2xl flex-shrink-0">
                {getIcon(notification.type)}
              </div>
              <div className="flex-1">
                <div className="flex justify-between items-start">
                  <div>
                    <h3 className="font-medium">{notification.title}</h3>
                    <p className="text-gray-600 dark:text-gray-300 mt-1">
                      {notification.description}
                    </p>
                  </div>
                  <span className="text-sm text-gray-500">
                    {notification.time}
                  </span>
                </div>
                {notification.link && (
                  <a
                    href={notification.link}
                    className="inline-block mt-3 text-sm text-blue-600 hover:text-blue-700"
                  >
                    –ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚Üí
                  </a>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
} 